name: CI

on:
  pull_request: {}

env:
  COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
  TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_EXPIRE_TIME: ${{ secrets.JWT_EXPIRE_TIME}}
  DB_HOST_TYPE: ${{ secrets.DB_HOST_TYPE }}
  PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
  DEV_DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
  PORT: ${{ secrets.PORT }}
  CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
  CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  NODEMAILER_SERVICE: ${{ secrets.NODEMAILER_SERVICE }}
  NODEMAILER_HOST: ${{ secrets.NODEMAILER_HOST }}
  NODEMAILER_EMAIL_PORT: ${{ secrets.NODEMAILER_EMAIL_PORT }}
  NODEMAILER_USER: ${{ secrets.NODEMAILER_USER }}
  NODEMAILER_PASS: ${{ secrets.NODEMAILER_PASS }}
  NODEMAILER_SECURE: ${{ secrets.NODEMAILER_SECURE }}
  CLIENT_ID: ${{ secrets.CLIENT_ID}}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET}}
  CALLBACK_URL: ${{ secrets.CALLBACK_URL}}
  PASSWORD_EXPIRATION_TIME: ${{secrets.PASSWORD_EXPIRATION_TIME}}
  URL: ${{ secrets.URL}}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY}}
  REDIS_URL: redis://localhost:6379
  FRONTEND_URL: ${{ secrets.FRONTEND_URL}}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run coverage

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
