version: '3'

services:
  database:
    image: 'postgres'
    env_file: .env
    ports:
      - ${DOCKER_POSTGRES_PORT}:${POSTGRES_PORT}

    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

    # volumes:
    #   - db-data:var/lib/postgres

  app-production:
    image: ne-shop-bn
    depends_on:
      - database

    build:
      context: .
      target: production
    env_file: .env

    environment:
      POSTGRES_HOST: 'database'
      POSTGRES_PORT: $PORT
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

    stdin_open: true
    tty: true
    ports:
      - 3000:8080

    command: npm run start

    volumes:
      - .:/ne-shop-bn

  app-development:
    image: ne-shop-bn-dev
    depends_on:
      - database
    build:
      context: .
      target: development
    volumes:
      - .:/ne-shop-bn

    env_file: .env

    environment:
      POSTGRES_HOST: 'database'
      POSTGRES_PORT: $PORT
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

    stdin_open: true
    tty: true
    ports:
      - ${DOCKER_LOCAL_PORT}:${PORT}

    command: npm run dev
# the development database runs on port 8080
# the production database runs on port 3000

# docker-compose up app-development - run the development server
# docker-compose up app-production - run the production server
